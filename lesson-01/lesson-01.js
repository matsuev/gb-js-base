'use strict'

// 1. Перевод температуры из шкалы Цельсия в шкалу Фаренгейта

var Tc = parseInt(prompt("Введите температуру (в градусах Цельсия)"));
var Tf = (9 / 5) * Tc + 32;
alert("Температура по Фаренгейту равна " + Tf.toFixed(2) + " градусов");

// 2. Работа с переменными

// 3. Объявить две переменные: admin и name. Записать в name строку "Василий";
// Скопировать значение из name в admin. Вывести admin (должно вывести «Василий»).

var admin;
var name = "Василий";

admin = name;
alert(admin); // "Василий"

// 4. *Чему будет равно JS-выражение 1000 + "108"

var result = 1000 + "108" // Результат "1000108"
/*
Один из операндов я вляется числом а другой - строкой.
Операция конкатенации текстовых строк имеет больший приоритет,
чем арифметическая операция сложения, следовательно числовое
значение 1000 переводится в строку и объединяется со строковым
значением "108".
*/
alert(result)

// 5. *Самостоятельно разобраться с атрибутами тега script (async и defer)

/*
Браузер разбирает HTML страницу последовательно и выполняет
код JavaScript в том месте, где он встречается. При этом
обработка HTML кода (который находится ниже скрипта)
блокируется до окончания загрузки и выполнения скрипта.

Аттрибуты тега <script> async и defer позволяют изменить
такое поведение.

1. Аттрибут async указывает, что скрипт абсолютно независим,
т.е. страница (и другие скрипты) будут выполняться не
дожидаясь загрузки асинхронных скриптов. Асинхронные скрипты
могут выполняться в любом порядке по мере их загрузки.
Событие DOMContentLoaded (окончание обработки элементов
страницы) может произойти раньше, чем все асинхронные
скрипты загрузятся и выполнятся.

2. Аттрибут defer означает отложенное выполнение скрипта.
Т.е. разбор HTML-кода и построение DOM-дерева не прерывается,
а скрипт будет выполнен в момент окончания загрузки. Событие
DOMContentLoaded сработает после выполнения скрипта.

https://learn.javascript.ru/script-async-defer
*/
